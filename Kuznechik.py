import format as f

Pi = [
    0xfc, 0xee, 0xdd, 0x11, 0xcf, 0x6e, 0x31, 0x16,
    0xfb, 0xc4, 0xfa, 0xda, 0x23, 0xc5, 0x04, 0x4d,
    0xe9, 0x77, 0xf0, 0xdb, 0x93, 0x2e, 0x99, 0xba,
    0x17, 0x36, 0xf1, 0xbb, 0x14, 0xcd, 0x5f, 0xc1,
    0xf9, 0x18, 0x65, 0x5a, 0xe2, 0x5c, 0xef, 0x21,
    0x81, 0x1c, 0x3c, 0x42, 0x8b, 0x01, 0x8e, 0x4f,
    0x05, 0x84, 0x02, 0xae, 0xe3, 0x6a, 0x8f, 0xa0,
    0x06, 0x0b, 0xed, 0x98, 0x7f, 0xd4, 0xd3, 0x1f,
    0xeb, 0x34, 0x2c, 0x51, 0xea, 0xc8, 0x48, 0xab,
    0xf2, 0x2a, 0x68, 0xa2, 0xfd, 0x3a, 0xce, 0xcc,
    0xb5, 0x70, 0x0e, 0x56, 0x08, 0x0c, 0x76, 0x12,
    0xbf, 0x72, 0x13, 0x47, 0x9c, 0xb7, 0x5d, 0x87,
    0x15, 0xa1, 0x96, 0x29, 0x10, 0x7b, 0x9a, 0xc7,
    0xf3, 0x91, 0x78, 0x6f, 0x9d, 0x9e, 0xb2, 0xb1,
    0x32, 0x75, 0x19, 0x3d, 0xff, 0x35, 0x8a, 0x7e,
    0x6d, 0x54, 0xc6, 0x80, 0xc3, 0xbd, 0x0d, 0x57,
    0xdf, 0xf5, 0x24, 0xa9, 0x3e, 0xa8, 0x43, 0xc9,
    0xd7, 0x79, 0xd6, 0xf6, 0x7c, 0x22, 0xb9, 0x03,
    0xe0, 0x0f, 0xec, 0xde, 0x7a, 0x94, 0xb0, 0xbc,
    0xdc, 0xe8, 0x28, 0x50, 0x4e, 0x33, 0x0a, 0x4a,
    0xa7, 0x97, 0x60, 0x73, 0x1e, 0x00, 0x62, 0x44,
    0x1a, 0xb8, 0x38, 0x82, 0x64, 0x9f, 0x26, 0x41,
    0xad, 0x45, 0x46, 0x92, 0x27, 0x5e, 0x55, 0x2f,
    0x8c, 0xa3, 0xa5, 0x7d, 0x69, 0xd5, 0x95, 0x3b,
    0x07, 0x58, 0xb3, 0x40, 0x86, 0xac, 0x1d, 0xf7,
    0x30, 0x37, 0x6b, 0xe4, 0x88, 0xd9, 0xe7, 0x89,
    0xe1, 0x1b, 0x83, 0x49, 0x4c, 0x3f, 0xf8, 0xfe,
    0x8d, 0x53, 0xaa, 0x90, 0xca, 0xd8, 0x85, 0x61,
    0x20, 0x71, 0x67, 0xa4, 0x2d, 0x2b, 0x09, 0x5b,
    0xcb, 0x9b, 0x25, 0xd0, 0xbe, 0xe5, 0x6c, 0x52,
    0x59, 0xa6, 0x74, 0xd2, 0xe6, 0xf4, 0xb4, 0xc0,
    0xd1, 0x66, 0xaf, 0xc2, 0x39, 0x4b, 0x63, 0xb6,
]

reverse_Pi = [
    0xa5, 0x2d, 0x32, 0x8f, 0x0e, 0x30, 0x38, 0xc0,
    0x54, 0xe6, 0x9e, 0x39, 0x55, 0x7e, 0x52, 0x91,
    0x64, 0x03, 0x57, 0x5a, 0x1c, 0x60, 0x07, 0x18,
    0x21, 0x72, 0xa8, 0xd1, 0x29, 0xc6, 0xa4, 0x3f,
    0xe0, 0x27, 0x8d, 0x0c, 0x82, 0xea, 0xae, 0xb4,
    0x9a, 0x63, 0x49, 0xe5, 0x42, 0xe4, 0x15, 0xb7,
    0xc8, 0x06, 0x70, 0x9d, 0x41, 0x75, 0x19, 0xc9,
    0xaa, 0xfc, 0x4d, 0xbf, 0x2a, 0x73, 0x84, 0xd5,
    0xc3, 0xaf, 0x2b, 0x86, 0xa7, 0xb1, 0xb2, 0x5b,
    0x46, 0xd3, 0x9f, 0xfd, 0xd4, 0x0f, 0x9c, 0x2f,
    0x9b, 0x43, 0xef, 0xd9, 0x79, 0xb6, 0x53, 0x7f,
    0xc1, 0xf0, 0x23, 0xe7, 0x25, 0x5e, 0xb5, 0x1e,
    0xa2, 0xdf, 0xa6, 0xfe, 0xac, 0x22, 0xf9, 0xe2,
    0x4a, 0xbc, 0x35, 0xca, 0xee, 0x78, 0x05, 0x6b,
    0x51, 0xe1, 0x59, 0xa3, 0xf2, 0x71, 0x56, 0x11,
    0x6a, 0x89, 0x94, 0x65, 0x8c, 0xbb, 0x77, 0x3c,
    0x7b, 0x28, 0xab, 0xd2, 0x31, 0xde, 0xc4, 0x5f,
    0xcc, 0xcf, 0x76, 0x2c, 0xb8, 0xd8, 0x2e, 0x36,
    0xdb, 0x69, 0xb3, 0x14, 0x95, 0xbe, 0x62, 0xa1,
    0x3b, 0x16, 0x66, 0xe9, 0x5c, 0x6c, 0x6d, 0xad,
    0x37, 0x61, 0x4b, 0xb9, 0xe3, 0xba, 0xf1, 0xa0,
    0x85, 0x83, 0xda, 0x47, 0xc5, 0xb0, 0x33, 0xfa,
    0x96, 0x6f, 0x6e, 0xc2, 0xf6, 0x50, 0xff, 0x5d,
    0xa9, 0x8e, 0x17, 0x1b, 0x97, 0x7d, 0xec, 0x58,
    0xf7, 0x1f, 0xfb, 0x7c, 0x09, 0x0d, 0x7a, 0x67,
    0x45, 0x87, 0xdc, 0xe8, 0x4f, 0x1d, 0x4e, 0x04,
    0xeb, 0xf8, 0xf3, 0x3e, 0x3d, 0xbd, 0x8a, 0x88,
    0xdd, 0xcd, 0x0b, 0x13, 0x98, 0x02, 0x93, 0x80,
    0x90, 0xd0, 0x24, 0x34, 0xcb, 0xed, 0xf4, 0xce,
    0x99, 0x10, 0x44, 0x40, 0x92, 0x3a, 0x01, 0x26,
    0x12, 0x1a, 0x48, 0x68, 0xf5, 0x81, 0x8b, 0xc7,
    0xd6, 0x20, 0x0a, 0x08, 0x00, 0x4c, 0xd7, 0x74,
]

l_vec = [1, 148, 32, 133, 16, 194, 192, 1,
         251, 1, 192, 194, 16, 133, 32, 148]


#  Ключ в 16-ом формате должен быть длины 64 8899aabbccddeeff0011223344556677fedcba98765432100123456789abcdef
def set_params():
    while True:
        key = input("Введите ключ в 16-ом формате, длиной 64: ")
        key = key.lower()
        if f.is_hex_alphabet(key):
            if len(key) == 64:
                break
            else:
                print("Ключ должен быть длины 64!")
        else:
            print("Ключ содержит недопустимые символы!")
    return key


def GF_mul(a: int, b: int) -> int:
    c = 0
    for i in range(8):
        if b & 1:
            c ^= a
        hi_bit = a & 0x80
        a <<= 1
        if hi_bit:
            a ^= 0xc3
        b >>= 1
    return c

def X(a: str, b: str) -> str:
    c = ""
    #В байтах:
    for i in range(16):
        c += hex(int(a[2*i:2*i+2], 16) ^ int(b[2*i:2*i+2], 16))[2:].zfill(2)
    return c.zfill(32)

def S(in_data: str) -> str:
    out_data = ""
    for i in range(16):
        out_data += hex(Pi[int(in_data[2*i:2*i+2], 16)])[2:].zfill(2)
    return out_data

def reverse_S(in_data: str) -> str:
    out_data = ""
    for i in range(16):
        out_data += hex(reverse_Pi[int(in_data[2*i:2*i+2], 16)])[2:].zfill(2)
    return out_data

def R(state: str) -> str:
    a_0 = 0
    internal = ["0"] * 16
    data = []
    for st in range(16):
        data.append(state[st*2:st*2+2])
    for i in range(16):
        internal[i] = data[i-1]
        a_0 ^= GF_mul(int(internal[i], 16), l_vec[i])
    internal[0] = hex(a_0)[2:].zfill(2)[-2:]
    return "".join(internal)

def reverse_R(state: str) -> str:
    a_15 = 0
    internal = ['0'] * 16
    for i in range(15, -1, -1):
        internal[i-1] = state[2*i:2*i+2]
        a_15 ^= GF_mul(int(state[2*i:2*i+2], 16), l_vec[i])
    internal[15] = hex(a_15)[2:].zfill(2)[-2:]
    return "".join(internal)

def L(in_data: str) -> str:
    out_data = in_data
    for i in range(16):
        out_data = R(out_data)
    return out_data

def reverse_L(in_data: str) -> str:
    out_data = in_data
    for i in range(16):
        out_data = reverse_R(out_data)
    return out_data

def F(key_1: str, key_2: str, iter_const: str) -> list:
    internal = X(key_1, iter_const)
    internal = S(internal)
    internal = L(internal)
    key_2 = X(internal, key_2)
    return [key_2, key_1]


def get_keys(key: str) -> list:
    keys = []
    iter_C = []
    iter_num = []
    for i in range(32):
        iter_num.append(i+1)
        iter_C.append(L(hex(iter_num[i])[2:].zfill(32)))

    iter_1 = key[0:len(key)//2]
    iter_2 = key[len(key)//2:]
    keys.append(iter_1)
    keys.append(iter_2)
    for i in range(4):
        for j in range(8):
            iter_1, iter_2 = F(iter_1, iter_2, iter_C[i*8+j])
        keys.append(iter_1)
        keys.append(iter_2)
    return keys



def encrypt(text: str, key: str) -> str:
    encrypted = text
    keys = get_keys(key)
    for i in range(9):
        encrypted = X(keys[i], encrypted)
        encrypted = S(encrypted)
        encrypted = L(encrypted)
    encrypted = X(keys[9], encrypted)
    return encrypted


def decrypt(text: str,  key: str) -> str:
    keys = get_keys(key)
    decrypted = X(text, keys[9])
    for i in range(8, -1, -1):
        decrypted = reverse_L(decrypted)
        decrypted = reverse_S(decrypted)
        decrypted = X(keys[i], decrypted)
    return decrypted


def blocks_128(text: str, key: str, do: str):
    output = ""
    if do == "encrypt":
        text = f.procedure2(text, 128)
    for start in range(0, len(text), 32):
        if do == "encrypt":
            output += encrypt(text[start:start + 32], key)
        elif do == "decrypt":
            output += decrypt(text[start:start + 32], key)
    if do == "decrypt":
        output = f.unprocedure2(output)
    return output


def main():
    print("Выбран шифр Кузнечик.")
    while True:
        print("Что вы хотите сделать? \n\t0. Вернуться в главное меню. "
              "\n\t1. Зашифровать (из to-encrypt.txt в to-decrypt.txt). "
              "\n\t2. Расшифровать (из to-decrypt.txt в result.txt).")

        do = int(input("Выберите опцию: "))

        if do == 0:
            break

        elif do == 1:
            key = set_params()
            text = f.read_from_file("to-encrypt.txt")
            #  Подготовка строки для шифрования
            prepared = f.replace_empty_symbols(text, 1)
            if not f.is_hex_alphabet(prepared):
                #  Преобразовать в 16 формат
                prepared = f.prepare_in(text, 1, 16)
            encrypted = f.prepare_out(blocks_128(prepared, key, "encrypt"), 1)

            f.write_to_file("to-decrypt.txt", encrypted, 1)

        elif do == 2:
            key = set_params()
            text = f.read_from_file("to-decrypt.txt")
            #  Подготовка строки для расшифрования
            prepared = f.prepare_in(text, 2)
            decrypted = blocks_128(prepared, key, "decrypt")
            print("Нужно ли преобразовать в буквы русского алфавита?"
                  "\n\t0. Нет. "
                  "\n\t1. Да. ")
            need = int(input("Выберите опцию: "))

            if need == 1:
                #  Преобразовать из 16 формата в буквы русского алфавита
                decrypted = f.prepare_out(decrypted, 2, 16)

            f.write_to_file("result.txt", decrypted, 2)